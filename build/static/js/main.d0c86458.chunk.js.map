{"version":3,"sources":["components/Edit.js","components/TableHeader.js","components/TableRow.js","components/TableBody.js","components/Pagination.js","components/Table.js","components/Upload.js","components/Export.js","components/Home.js","App.js","reportWebVitals.js","index.js"],"names":["Edit","location","filename","id","items","itemData","filter","key","className","Form","Object","keys","map","i","Group","controlId","Label","Control","type","defaultValue","onChange","event","editItem","e","target","value","inputChangedHandler","Button","variant","onClick","window","confirm","splice","localStorage","setItem","JSON","stringify","TableHeader","TableRow","object","TableBody","currentRows","onDelete","data2","to","pathname","style","color","cursor","Pagination","rowsPerPage","totalRows","paginate","pageNumbers","Math","ceil","push","number","Table","setItems","useState","currentPage","setCurrentPage","setRowsPerPage","indexOfLastRow","indexOfFirstRow","slice","length","DropdownButton","title","onSelect","Dropdown","Item","eventKey","data","item","index","Upload","setFileName","file","name","Promise","res","rej","fileReader","FileReader","readAsArrayBuffer","onload","bufferArray","result","workBook","XLSX","workSheetName","SheetNames","workSheet","Sheets","sheet_to_json","onerror","error","then","obj","uuid","readExcel","files","htmlFor","Export","fileName","wb","json_to_sheet","excelBuffer","bookType","Blob","FileSaver","exportToCSV","Home","getItem","lsObj","strObj","App","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oUAyDeA,EAtDF,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACJC,EAAaD,EAAbC,SACAC,EAAOF,EAAPE,GACFC,EAAUH,EAAVG,MACFC,EAAWD,EAAME,QAAO,SAACC,GAAD,OAASA,EAAIJ,KAAOA,KAwBhD,OACI,qBAAKK,UAAU,iBAAf,SACI,eAACC,EAAA,EAAD,WAEQC,OAAOC,KAAKN,EAAS,IAAIO,KAAI,SAACL,EAAKM,GAC/B,GAAY,OAARN,EACA,OAAO,eAACE,EAAA,EAAKK,MAAN,CAAoBC,UAAU,iBAA9B,UACK,cAACN,EAAA,EAAKO,MAAN,UAAaT,IACb,cAACE,EAAA,EAAKQ,QAAN,CAAcC,KAAK,OAAOC,aAAcd,EAAS,GAAGE,GAAMa,SAAU,SAACC,GAAD,OA9B5E,SAACC,EAAUC,EAAGhB,GACtCe,EAASf,GAAOgB,EAAEC,OAAOC,MACzBpB,EAAS,GAAKiB,EA4B+FI,CAAoBrB,EAAS,GAAIgB,EAAOd,QAFzGM,MASpC,cAACc,EAAA,EAAD,CAAQnB,UAAU,OAAOoB,QAAQ,UAAUV,KAAK,SAAhD,kBAGA,cAACS,EAAA,EAAD,CAAQnB,UAAU,YAAYoB,QAAQ,SAASV,KAAK,SAASW,QA1BtD,WACDC,OAAOC,QAAQ,kBAEzB3B,EAAM4B,OAAO7B,EAAI,GACjB8B,aAAaC,QAAQhC,EAAUiC,KAAKC,UAAUhC,MAsB1C,0B,QC9BDiC,EAnBK,SAAC,GAAe,IAAbjC,EAAY,EAAZA,MACnB,OACI,gCACI,+BACI,sCAEIM,OAAOC,KAAKP,EAAM,IAAIQ,KAAI,SAAAL,GACtB,GAAY,OAARA,EACA,OAAO,6BAAeA,GAANA,MAK5B,0CAVK,SCQN+B,EAXE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI7B,OAAOC,KAAK4B,GAAQ3B,KAAI,SAAAL,GACpB,GAAY,OAARA,EACA,OAAO,6BAAegC,EAAOhC,IAAbA,O,QCkCjBiC,EAjCG,SAAC,GAAgD,IAA9CpC,EAA6C,EAA7CA,MAAOqC,EAAsC,EAAtCA,YAAaC,EAAyB,EAAzBA,SAAUxC,EAAe,EAAfA,SAC/C,OACI,gCAEQuC,EAAY7B,KAAI,SAAC+B,EAAO9B,GAAR,OACZ,+BACI,6BACI,cAAC,IAAD,CAAM+B,GAAI,CACFC,SAAS,aAAD,OAAehC,GACvBT,MAAOA,EACPF,SAAUA,EACVC,GAAIwC,EAAMxC,IAJlB,SAOI,cAAC,IAAD,CACI2C,MAAO,CAAEC,MAAO,QAASC,OAAQ,gBATpC,OAaT,cAAC,EAAD,CAAUT,OAAQI,IAClB,6BACI,cAAC,IAAD,CACIG,MAAQ,CAAEC,MAAO,MAAOC,OAAQ,WAChCnB,QAAS,kBAAMa,EAASC,OAHvB,SAfJ9B,SCadoC,EArBW,SAAC,GAGvB,IAH+D,IAAvCC,EAAsC,EAAtCA,YAAaC,EAAyB,EAAzBA,UAAWC,EAAc,EAAdA,SAC1CC,EAAc,GAEXxC,EAAE,EAAGA,GAAIyC,KAAKC,KAAKJ,EAAYD,GAAcrC,IAClDwC,EAAYG,KAAK3C,GAErB,OACI,8BACI,oBAAIL,UAAU,aAAd,SACK6C,EAAYzC,KAAI,SAAA6C,GAAM,OACnB,oBAAiBjD,UAAU,YAA3B,SACI,wBAAQqB,QAAS,kBAAMuB,EAASK,IAASjD,UAAU,YAAnD,SACKiD,KAFAA,W,gBC+CdC,EAjDD,SAAC,GAAmC,IAAjCtD,EAAgC,EAAhCA,MAAOuD,EAAyB,EAAzBA,SAAUzD,EAAe,EAAfA,SAAe,EACP0D,mBAAS,GADF,mBACtCC,EADsC,KACzBC,EADyB,OAEPF,mBAAS,GAFF,mBAEtCV,EAFsC,KAEzBa,EAFyB,KAKvCC,EAAiBH,EAAcX,EAC/Be,EAAkBD,EAAiBd,EACnCT,EAAcrC,EAAM8D,MAAMD,EAAiBD,GAajD,OAAqB,IAAjB5D,EAAM+D,QAA0B,OAAV/D,EAElB,mCACI,oBAAII,UAAU,cAAd,uBAKJ,sBAAKA,UAAU,kCAAf,UACI,eAAC4D,EAAA,EAAD,CACIC,MAAM,cACNlE,GAAG,4BACHmE,SAhBG,SAAC/C,GAChBwC,EAAexC,IAYP,UAKI,cAACgD,EAAA,EAASC,KAAV,CAAeC,SAAS,IAAxB,eACA,cAACF,EAAA,EAASC,KAAV,CAAeC,SAAS,IAAxB,eACA,cAACF,EAAA,EAASC,KAAV,CAAeC,SAAS,KAAxB,gBACA,cAACF,EAAA,EAASC,KAAV,CAAeC,SAAS,KAAxB,mBAEJ,wBAAOjE,UAAU,kBAAjB,UACI,cAAC,EAAD,CAAaJ,MAAOA,IACpB,cAAC,EAAD,CAAWF,SAAUA,EAAUE,MAAOA,EAAOqC,YAAaA,EAAakB,SAAUA,EAAUjB,SA7BzF,SAACgC,GACff,EAASvD,EAAME,QAAO,SAACqE,EAAMC,GAAP,OAAiBD,EAAKxE,KAAOuE,EAAKvE,aA8BhD,cAAC,EAAD,CAAY+C,YAAaA,EAAaC,UAAW/C,EAAM+D,OAAQf,SAjC1D,SAACC,GAAD,OAAiBS,EAAeT,U,yBCuCtCwB,EAxDA,SAAC,GAAgD,IAA9ClB,EAA6C,EAA7CA,SAAUmB,EAAmC,EAAnCA,YAAmC,EAAtB5E,SAAsB,EAAZE,MA6C/C,OACI,sBAAKI,UAAU,kCAAf,UACI,uBAAOL,GAAG,mBAAmBK,UAAU,eAAeU,KAAK,OAAOE,SAAU,SAACG,IA9CrE,SAACwD,GACRA,GASDD,EAAYC,EAAKC,MACE,IAAIC,SAAQ,SAACC,EAAKC,GAC7B,IAAMC,EAAa,IAAIC,WACvBD,EAAWE,kBAAkBP,GAE7BK,EAAWG,OAAS,SAAChE,GACjB,IAAMiE,EAAcjE,EAAEC,OAAOiE,OAEvBC,EAASC,OAAUH,EAAa,CAACtE,KAAM,WAEvC0E,EAAgBF,EAASG,WAAW,GAEpCC,EAAYJ,EAASK,OAAOH,GAE5BlB,EAAOiB,QAAWK,cAAcF,GAEtCZ,EAAIR,IAGRU,EAAWa,QAAS,SAACC,GACjBf,EAAIe,OAIJC,MAAK,SAACzB,GACVA,EAAK9D,KAAI,SAACwF,GAEN,OADAA,EAAIjG,GAAKkG,MACFD,KAEXzC,EAASe,OArCL5C,OAAOC,QAAQ,mCAEvB4B,EAAS,IA4CT2C,CADa/E,EAAEC,OAAO+E,MAAM,OAGhC,uBAAO/F,UAAU,mBAAmBgG,QAAQ,mBAA5C,wB,QChCGC,EAlBA,SAAC,GAAa,IAAZrG,EAAW,EAAXA,MAab,OACI,cAACuB,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,SAACN,GAAD,OATnB,SAACnB,EAAOsG,GACxB,IACMC,EAAK,CAAEZ,OAAQ,CAAE,KADZJ,QAAWiB,cAAcxG,IACCyF,WAAY,CAAC,SAC5CgB,EAAclB,QAAWgB,EAAI,CAAEG,SAAU,OAAQ5F,KAAM,UACvDwD,EAAO,IAAIqC,KAAK,CAACF,GAAc,CAAC3F,KAPzB,oFAQb8F,SAAiBtC,EAAMgC,EAPL,SAWwBO,CAAY7G,EAAM,iBAA5D,qBCSO8G,MApBf,WAAiB,IAAD,EACmBtD,mBAAS,IAD5B,mBACP1D,EADO,KACI4E,EADJ,OAEYlB,mBAAS,IAFrB,mBAEPxD,EAFO,KAEAuD,EAFA,KAId,IAAK1B,aAAakF,QAAQ,YAAa,CACrC,IAAMC,EAAQ,CAAClH,WAAUE,SACnBiH,EAASlF,KAAKC,UAAUgF,GAC9BnF,aAAaC,QAAQ,WAAYmF,GAGnC,OACE,sBAAK7G,UAAU,iBAAf,UAEE,cAAC,EAAD,CAAQN,SAAUA,EAAU4E,YAAaA,EAAa1E,MAAOA,EAAOuD,SAAUA,IAC9E,cAAC,EAAD,CAAOvD,MAAOA,EAAOF,SAAUA,EAAUyD,SAAUA,IACnD,cAAC,EAAD,CAAQvD,MAAOA,QCHNkH,MAZf,WACE,OACI,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWP,IACjC,cAAC,IAAD,CAAOK,KAAK,QAAQC,OAAK,EAACC,UAAWzH,IACrC,cAAC,IAAD,CAAOuH,KAAK,eAAeE,UAAWzH,UCDjC0H,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d0c86458.chunk.js","sourcesContent":["import Form from \"react-bootstrap/Form\"\r\nimport Button from \"react-bootstrap/Button\"\r\n\r\nconst Edit = ({ location }) => {\r\n    const { filename } = location;\r\n    const { id } = location;\r\n    let { items } = location;\r\n    let itemData = items.filter((key) => key.id === id);\r\n\r\n    const inputChangedHandler = (editItem, e, key) => {\r\n        editItem[key] = e.target.value;\r\n        itemData[0] = editItem;\r\n    }\r\n\r\n    // const saveItems = () => {\r\n    //     items.map((item, i) => {\r\n    //         if (item.id === itemData[0].id) {\r\n    //             return item = itemData[0]\r\n    //         }\r\n    //     })\r\n\r\n    //     localStorage.setItem(filename, JSON.stringify(items));\r\n    // }\r\n    const deleteItem = () => {\r\n        const yesNo = window.confirm('Delete Item?');\r\n        if (yesNo) {\r\n            items.splice(id, 1);\r\n            localStorage.setItem(filename, JSON.stringify(items));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"container mt-3\">\r\n            <Form>\r\n                {\r\n                    Object.keys(itemData[0]).map((key, i) => {\r\n                        if (key !== 'id') {\r\n                            return <Form.Group key={i} controlId=\"formBasicEmail\">\r\n                                        <Form.Label>{key}</Form.Label>\r\n                                        <Form.Control type=\"text\" defaultValue={itemData[0][key]} onChange={(event)=>inputChangedHandler(itemData[0], event, key)}/>\r\n                                    </Form.Group>       \r\n                        }\r\n                    }\r\n\r\n                    )\r\n                }\r\n                <Button className=\"mt-3\" variant=\"primary\" type=\"button\">\r\n                    Save\r\n                </Button>\r\n                <Button className=\"mt-3 mx-2\" variant=\"danger\" type=\"button\" onClick={deleteItem}>\r\n                    Delete\r\n                </Button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Edit","const TableHeader = ({ items }) => {\r\n    return (\r\n        <thead>\r\n            <tr key={1234}>\r\n                <th>Edit</th>\r\n                {\r\n                    Object.keys(items[0]).map(key => {\r\n                        if (key !== 'id') {\r\n                            return <th key={key}>{key}</th>\r\n                        }\r\n                    }   \r\n                    )\r\n                }  \r\n                <th>Delete</th>\r\n            </tr>\r\n        </thead>\r\n    )\r\n}\r\n\r\nexport default TableHeader","const TableRow = ({ object }) => {\r\n    return (\r\n        Object.keys(object).map(key => {\r\n            if (key !== 'id') {\r\n                return <td key={key}>{object[key]}</td>\r\n            }\r\n        }\r\n        )\r\n    )\r\n}\r\n\r\nexport default TableRow\r\n","import TableRow from \"./TableRow\";\r\n\r\nimport { FaTimes, FaEdit } from 'react-icons/fa'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst TableBody = ({ items, currentRows, onDelete, filename }) => {\r\n    return (\r\n        <tbody>\r\n            {\r\n                currentRows.map((data2, i) => (\r\n                    <tr key={i}>\r\n                        <td key={87866}>\r\n                            <Link to={{\r\n                                    pathname: `edit/rowNo${i}`,\r\n                                    items: items,\r\n                                    filename: filename,\r\n                                    id: data2.id\r\n                                }}\r\n                            >\r\n                                <FaEdit \r\n                                    style={{ color: 'green', cursor: 'pointer'}}\r\n                                />\r\n                            </Link>\r\n                        </td>\r\n                        <TableRow object={data2}/>\r\n                        <td key={87867}>\r\n                            <FaTimes \r\n                                style= {{ color: 'red', cursor: 'pointer'}} \r\n                                onClick={() => onDelete(data2)}\r\n                            />\r\n                        </td>\r\n                    </tr>\r\n                ))\r\n            }\r\n        </tbody>\r\n    )\r\n}\r\n\r\nexport default TableBody\r\n\r\n","import React from 'react'\r\n\r\nexport const Pagination = ({rowsPerPage, totalRows, paginate}) => {\r\n    const pageNumbers = [];\r\n\r\n    for (let i=1; i<= Math.ceil(totalRows / rowsPerPage); i++) {\r\n        pageNumbers.push(i);\r\n    }\r\n    return (\r\n        <nav>\r\n            <ul className=\"pagination\">\r\n                {pageNumbers.map(number => (\r\n                    <li key={number} className=\"page-item\">\r\n                        <button onClick={() => paginate(number)} className=\"page-link\">\r\n                            {number}\r\n                        </button>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Pagination;\r\n","import TableHeader from \"./TableHeader\";\r\nimport TableBody from \"./TableBody\";\r\n\r\nimport { useState } from \"react\";\r\n\r\nimport Pagination from './Pagination';\r\n\r\nimport Dropdown from \"react-bootstrap/Dropdown\"\r\nimport DropdownButton from \"react-bootstrap/DropdownButton\"\r\n\r\nconst Table = ({ items, setItems, filename }) => {\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [rowsPerPage, setRowsPerPage] = useState(1);\r\n\r\n    //get current rows\r\n    const indexOfLastRow = currentPage * rowsPerPage;\r\n    const indexOfFirstRow = indexOfLastRow - rowsPerPage;\r\n    const currentRows = items.slice(indexOfFirstRow, indexOfLastRow);\r\n\r\n    //change page\r\n    const paginate = (pageNumbers) => setCurrentPage(pageNumbers)\r\n\r\n    const deleteRow = (data) => {\r\n        setItems(items.filter((item, index) => item.id !== data.id))\r\n    };\r\n\r\n    const handleSelect=(e)=>{\r\n        setRowsPerPage(e)\r\n    }\r\n\r\n    if (items.length === 0 || items === null) {\r\n        return (\r\n            <>\r\n                <h2 className=\"text-center\">No Data</h2>\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <div className=\"input-group container mt-3 mb-3\">\r\n                <DropdownButton\r\n                    title=\"No. Of Rows\"\r\n                    id=\"dropdown-menu-align-right\"\r\n                    onSelect={handleSelect}\r\n                >\r\n                    <Dropdown.Item eventKey=\"1\">1</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"5\">5</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"10\">10</Dropdown.Item>\r\n                    <Dropdown.Item eventKey=\"15\">15</Dropdown.Item>\r\n                </DropdownButton>\r\n                <table className=\"table container\">\r\n                    <TableHeader items={items} />\r\n                    <TableBody filename={filename} items={items} currentRows={currentRows} setItems={setItems} onDelete={deleteRow}/>\r\n                </table>\r\n                <Pagination rowsPerPage={rowsPerPage} totalRows={items.length} paginate={paginate}/>\r\n            </div>\r\n        ) \r\n    }\r\n}\r\n\r\nexport default Table","import * as XLSX from \"xlsx\";\r\nimport uuid from 'react-uuid';\r\n\r\nconst Upload = ({ setItems, setFileName, filename, items }) => {\r\n    const readExcel=(file)=>{\r\n        if (!file) {\r\n            let yesNo = window.confirm('No file Selected, Delete Data?');\r\n             if (yesNo) {\r\n                setItems([]);\r\n             } else {\r\n                 //do nothing                \r\n             }\r\n            \r\n        } else {\r\n            setFileName(file.name);\r\n                const promise= new Promise((res, rej) => {\r\n                    const fileReader = new FileReader();\r\n                    fileReader.readAsArrayBuffer(file);\r\n            \r\n                    fileReader.onload = (e) => {\r\n                        const bufferArray = e.target.result;\r\n            \r\n                        const workBook=XLSX.read(bufferArray, {type: 'buffer'});\r\n            \r\n                        const workSheetName = workBook.SheetNames[0];\r\n            \r\n                        const workSheet = workBook.Sheets[workSheetName];\r\n            \r\n                        const data = XLSX.utils.sheet_to_json(workSheet);\r\n            \r\n                        res(data);\r\n                    };\r\n            \r\n                    fileReader.onerror=((error) => {\r\n                        rej(error);\r\n                    })\r\n                });\r\n            \r\n                promise.then((data) => {\r\n                    data.map((obj) => {\r\n                        obj.id = uuid();\r\n                        return obj;\r\n                    })\r\n                    setItems(data);\r\n                });\r\n            }\r\n    };\r\n\r\n    return (\r\n        <div className=\"input-group container mt-3 mb-3\">\r\n            <input id=\"inputGroupFile02\" className=\"form-control\" type=\"file\" onChange={(e) => {\r\n                const file = e.target.files[0];\r\n                readExcel(file);\r\n            }}/>\r\n            <label className=\"input-group-text\" htmlFor=\"inputGroupFile02\">Upload</label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Upload","import Button from 'react-bootstrap/Button';\r\nimport * as FileSaver from 'file-saver';\r\nimport * as XLSX from 'xlsx';\r\n\r\nconst Export = ({items}) => {\r\n\r\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\r\n    const fileExtension = '.xlsx';\r\n\r\n    const exportToCSV = (items, fileName) => {\r\n        const ws = XLSX.utils.json_to_sheet(items);\r\n        const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\r\n        const data = new Blob([excelBuffer], {type: fileType});\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n    }\r\n\r\n    return (\r\n        <Button variant=\"success\" onClick={(e) => exportToCSV(items,'Export_Excel')}>Export</Button>\r\n    )\r\n}\r\n\r\nexport default Export;","import { useState } from \"react\";\r\n\r\nimport Table from \"./Table\";\r\nimport Upload from \"./Upload\";\r\nimport Export from \"./Export\"\r\n// import CustomDropdown from \"./CustomDropdown\";\r\n\r\nfunction Home() {\r\n  const [filename,  setFileName] = useState([]);\r\n  const [items, setItems] = useState([]);\r\n\r\n  if (!localStorage.getItem('filename')) {\r\n    const lsObj = {filename, items};\r\n    const strObj = JSON.stringify(lsObj);\r\n    localStorage.setItem('filename', strObj);\r\n  }\r\n\r\n  return (\r\n    <div className=\"container mt-3\">\r\n      {/* <CustomDropdown items={items} setItems={setItems}/> */}\r\n      <Upload filename={filename} setFileName={setFileName} items={items} setItems={setItems}/>\r\n      <Table items={items} filename={filename} setItems={setItems}/>\r\n      <Export items={items}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport './App.css';\n\nimport Edit from './components/Edit';\nimport Home from './components/Home';\n\n\nfunction App() {\n  return (\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/edit\" exact component={Edit} />\n          <Route path=\"/edit/:title\" component={Edit} />\n        </Switch>\n      </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}